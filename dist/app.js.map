{"version":3,"sources":["../js/app.js"],"names":["express","require","app","logger","db","use","static","router","data","tables","users","name","origin","console","log","process","versions","connect","MODE_TEST","err","exit","listen","blocks","param","request","response","next","isYearFormat","params","year","status","json","value","regexp","RegExp","test","get","city","citiesYear","blockName","parseCityName","parsedName","toUpperCase","slice","toLowerCase","description","query","limit"],"mappings":"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","file":"app.js","sourcesContent":["/**\r\n * Created by Yoana on 9/7/2017.\r\n */\r\n\r\n//import  FirstComponent from './firstReactComponent'\r\n\r\nvar express = require('express');\r\nvar app = express();\r\nvar logger = require('./logger');\r\n\r\nvar db = require('../db');\r\napp.use(logger);\r\n\r\napp.use(express.static('../public'));\r\nvar router = require('../routes/users');\r\napp.use('/users',router);\r\n\r\nvar data = {\r\n    tables: {\r\n        users: [\r\n            { name: \"John\", origin: \"English\"},\r\n            { name: \"Peter\", origin: \"Canadian\"},\r\n        ]\r\n\r\n    }\r\n}\r\nconsole.log(process.versions); //GOOD FOR KNOWING YOUR VERSIONS\r\n// Connect to MySQL on start\r\ndb.connect(db.MODE_TEST, function(err) {\r\n    if (err) {\r\n        console.log('Unable to connect to MySQL.')\r\n        process.exit(1)\r\n    } else {\r\n        app.listen(5000, function() {\r\n            console.log('Listening on port 5000...')\r\n        })\r\n    }\r\n})\r\n\r\n\r\n\r\n// db.connect(db.MODE_TEST, function() {\r\n//     db.fixtures(data, function(err) {\r\n//         if (err) return console.log(err)\r\n//         console.log('Data has been loaded...')\r\n//     })\r\n// })\r\n\r\n\r\n\r\n// app.use(function(request, response, next){\r\n//     if (request.path === \"/blocks\"){\r\n//         next();\r\n//     } else {\r\n//         response.status(404).json(\"Path requested does not exist\");\r\n//     }\r\n// });\r\n\r\nvar blocks = {\r\n    'Fixed' : 'Fasted securely in position',\r\n    'Movable' : 'Capable of being moved',\r\n    'Rotating' : 'Moving in a circle around its center'\r\n};\r\n\r\n\r\n\r\n\r\napp.param('year', function(request, response, next) {\r\n    if(isYearFormat(request.params.year)) {\r\n        next();\r\n    } else {\r\n        response.status(400).json('Invalid Format for Year');\r\n    }\r\n});\r\n\r\nfunction isYearFormat(value) {\r\n    var regexp = RegExp(/^d{4}$/);\r\n    return regexp.test(value);\r\n}\r\n\r\napp.get('/cities/year/:year', function(request, response) {\r\n    var year = request.params.year;\r\n    var city = citiesYear[year];\r\n\r\n    if(!city) {\r\n        response.status(404).json(\"No City found for given year\");\r\n    } else {\r\n        response.json(\"In \" + year + \", \" + city + \" is created.\");\r\n    }\r\n});\r\n\r\nvar citiesYear = {\r\n    5000: 'Lotopia',\r\n    5100: 'Caspiana',\r\n    5105: 'Indigo',\r\n    6000: 'Paradise',\r\n    7000: 'Flotilla'\r\n};\r\n\r\napp.param('name',function(request,response,next){\r\n   // var name = request.params.name;\r\n   // var block = name[0].toUpperCase() + name.slice(1).toLowerCase();\r\n    request.blockName = parseCityName(request.params.name);;\r\n    next();\r\n});\r\n\r\nfunction parseCityName(name){\r\n    var parsedName = name[0].toUpperCase() + name.slice(1).toLowerCase();\r\n    return parsedName;\r\n}\r\n\r\napp.get('/cities/:name',function(request,response){\r\n    var description = blocks[request.blockName];//if you have a route for example blocks/:name\r\n    if(!description)\r\n    {\r\n       response.status(404).json('No description found for '+request.params.name);\r\n      //  response.json(citySearch(request.query.search));\r\n    }else {\r\n        response.json(description);// it sets the status code to 200 success\r\n    }\r\n});\r\n\r\napp.get('/blocks',function(request,response){\r\n//var blocks = ['Fixed','Movable','Rotating'];\r\n\r\nif(request.query.limit >= 0){\r\n  response.json(blocks.slice(0, request.query.limit));\r\n}else{\r\nresponse.json(Object.keys(blocks));\r\n}\r\n});\r\n\r\n// app.listen(3000, function(){\r\n//    console.log('Go server on port 3000 \\n ')\r\n// });\r\n\r\n\r\n//app.get('/',function(request,response){\r\n// response.sendfile(__dirname,'/public/index.html');\r\n\r\n//});\r\n\r\n//\r\n// function citySearch (keyword) {\r\n//     var regexp = RegExp(keyword, 'i');\r\n//     var result = cities.filter(function (city) {\r\n//         return city.match(regexp);\r\n//     });\r\n//\r\n//     return result;\r\n// }\r\n// app.post('/users', parseUrlencoded, function(request,response){\r\n//     if(request.body.description.length > 4) {\r\n//         var user = createUser(request.body.name, request.body.description);\r\n//         response.status(201).json(user);\r\n//     }else\r\n//     {\r\n//         response.status(400).json('Invalid request'); // Bad request\r\n//     }\r\n// });\r\n\r\n// app.delete('/user/:name', function (request,response) {\r\n//     if(users[request.blockName]) {\r\n//         delete users[request.blockName];\r\n//         response.sendStatus(200);//some clients can not handle empty respond very well\r\n//     }else{\r\n//         response.sendStatus(404);\r\n//     }\r\n// });\r\n\r\n// app.get('/users/:name',function(request,response){\r\n//     var username = users[request.blockName];//if you have a route for example blocks/:name\r\n//     if(!username)\r\n//     {\r\n//         response.status(404).json('No Person found with Name: '+request.params.name);\r\n//     }else {\r\n//         response.json(username);// it sets the status code to 200 success\r\n//     }\r\n// });\r\n\r\n\r\n// app.get('/users',function(request,response){\r\n//     if(request.query.limit >= 0){\r\n//         response.json(users.slice(0, request.query.limit));\r\n//     }else{\r\n//         response.json(Object.keys(users));\r\n//     }\r\n// });"]}